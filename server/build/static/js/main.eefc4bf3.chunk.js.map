{"version":3,"sources":["Components/MediaFilePicker.jsx","App.js","reportWebVitals.js","index.js"],"names":["availableFilesColumns","dataField","text","addedToStreamColumns","MediaClip","filename","from","to","this","MediaFilePicker","props","useState","mediaDuration","setMediaDuration","selectedMedia","setSelectedMedia","showModal","setShowModal","availableMediaFilesData","setAvailableMediaFilesData","modalFrom","setModalFrom","modalTo","setModalTo","mediaAddedToStreamData","setMediaAddedToStreamData","a","isMounted","loadAvailableMediaFiles","response","data","mediaFilesData","forEach","mediaFile","push","useEffect","console","log","loadAvailableMediaFilesData","updateVideosToStreamData","availableMediaFilesRowEvents","onClick","e","row","rowIndex","mediaFilename","getMediaDuration","duration","getMediaDurationRoute","Axios","post","handleClose","id","mediaToStream","mediaClip","mediaData","Modal","show","onHide","Header","Body","className","type","min","max","onChange","event","target","value","Footer","Button","variant","error","modalFromFloat","parseFloat","modalToFloat","mediaDurationFloat","alert","class","tableOneHeading","classes","keyField","columns","bootstrap4","hover","rowEvents","tableTwoHeading","App","videoFilesToStream","useRef","audioFilesToStream","showVideoPlayer","setShowVideoPlayer","streamCreationStatus","setStreamCreationStatus","showStreamStatus","setShowStreamStatus","createStreamBtnDisabled","setcreateStreamBtnDisabled","showClipLoader","setShowClipLoader","src","autoPlay","controls","width","height","getVideoFilesData","current","getAudioFilesData","disabled","size","loading","length","videoMediaClipJson","video","jsonData","audioMediaClipJson","audio","get","createStreamResponse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eefc4bf3.chunk.js","sourcesContent":["import 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport Axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { Button } from \"react-bootstrap\";\nimport BootstrapTable from 'react-bootstrap-table-next';\n\n/**\n * Columns for the available files table\n */\nconst availableFilesColumns = [\n    {\n        dataField: \"filename\",\n        text: \"Filename\"\n    }\n]\n\n/**\n * Columns for the files added to stream table\n */\nconst addedToStreamColumns = [\n    {\n        dataField: \"id\",\n        text: \"Id\"\n    },\n    {\n        dataField: \"filename\",\n        text: \"Filename\"\n    },\n    {\n        dataField: \"from\",\n        text: \"From (seconds)\"\n    },\n    {\n        dataField: \"to\",\n        text: \"To (seconds)\"\n    }\n]\n\nfunction MediaClip(filename, from, to) {\n    this.filename = filename;\n    this.from = from;\n    this.to = to;\n}\n\n\nconst MediaFilePicker = (props) => {\n    const [mediaDuration, setMediaDuration] = useState(null);\n    const [selectedMedia, setSelectedMedia] = useState(null);\n    const [showModal, setShowModal] = useState(false);\n    const [availableMediaFilesData, setAvailableMediaFilesData] = useState([{ filename: \"Loading..\" }]);\n    const [modalFrom, setModalFrom] = useState(null);\n    const [modalTo, setModalTo] = useState(null);\n    const [mediaAddedToStreamData, setMediaAddedToStreamData] = useState(\"\")\n\n    // similar to componentDidMount\n    // as per react documentation, data fetching can be done in useEffect()\n    useEffect(() => {\n        console.log(\"use effect\");\n        loadAvailableMediaFilesData();\n        updateVideosToStreamData();\n    }, []);\n\n\n    /**\n     * Load the available media filenames into the table from the server\n     */\n    async function loadAvailableMediaFilesData() {\n        let isMounted = true;\n        const response = await props.loadAvailableMediaFiles();\n\n        if (response.data) {\n            const mediaFilesData = []\n            response.data.forEach((mediaFile) => {\n                mediaFilesData.push({\n                    filename: mediaFile\n                });\n            });\n\n            if (isMounted) setAvailableMediaFilesData(mediaFilesData);\n        }\n        isMounted = false;\n    }\n\n    /**\n     * Available media files tables' row events\n     */\n    const availableMediaFilesRowEvents = {\n        onClick: async (e, row, rowIndex) => {\n            // set the row information and open up the dialog \n            const mediaFilename = row.filename;\n            console.log(\"video filename: \" + mediaFilename);\n            let duration = await getMediaDuration(mediaFilename);\n            console.log(\"duration: \" + duration);\n\n            setSelectedMedia(mediaFilename);\n            setMediaDuration(duration);\n            handleShow();\n        }\n    }\n\n    /**\n     * Get the duration of the media file selected\n     */\n    async function getMediaDuration(filename) {\n        // ask the server to get the duration of this file/\n        try {\n            let data = {\n                filename: filename\n            }\n            console.log(\"get media duration route-->  \" + props.getMediaDurationRoute);\n            const response = await Axios.post(`http://localhost:3000/${props.getMediaDurationRoute}`, data);\n            return response.data;\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    /**\n     * Handle close of the Modal dialog\n     */\n    function handleClose() {\n        setShowModal(false);\n    }\n\n    /**\n     * Handle show of the Modal dialog\n     */\n    function handleShow() {\n        setShowModal(true);\n    }\n\n    /**\n     * Handle \"Add to stream\" button click from modal dialog.\n     */\n    function handleAddToStream() {\n        // do some basic error checking here.. \n        // we can add more complex error checking in the future\n        // check if from is less than total video duration\n        // check if to is less than total video duration\n        // check if to is greater than from\n        let error = false;\n        let modalFromFloat = parseFloat(modalFrom);\n        let modalToFloat = parseFloat(modalTo);\n        let mediaDurationFloat = parseFloat(mediaDuration);\n        if (modalFromFloat >= mediaDurationFloat) {\n            error = true;\n            alert(\"The 'From' duration should be less than the total video duration\");\n        } else if (modalToFloat > mediaDurationFloat) {\n            error = true;\n            alert(\"The 'To' duration should be less than or equal to the total video duration\");\n        } else if (modalFromFloat >= modalToFloat) {\n            error = true;\n            alert(\"The 'From' duration should be less than the 'To' duration\");\n        } else if (modalFrom == null || modalTo == null) {\n            error = true;\n            alert(\"Please enter values into 'From' and 'To' fields\");\n        }\n\n        if (!error) {\n            let mediaClip = new MediaClip(selectedMedia, modalFrom, modalTo);\n            props.mediaToStream.push(mediaClip);\n            updateVideosToStreamData();\n            setShowModal(false);\n        }\n    }\n\n\n    function updateVideosToStreamData() {\n        const data = [];\n        let id = 0;\n        props.mediaToStream.forEach((mediaClip) => {\n            const mediaData = {\n                id: id,\n                filename: mediaClip.filename,\n                from: mediaClip.from,\n                to: mediaClip.to\n            }\n        \n            id++;\n\n            data.push(mediaData);\n        });\n\n        setMediaAddedToStreamData(data);\n    }\n\n\n    /**\n     * Handle onChange on the \"From\" input element in the modal dialog.\n     */\n    function handleModalFromOnChange(event) {\n        setModalFrom(event.target.value);\n    }\n\n\n    /**\n     * Handle onChange on the \"To\" input element in the modal dialog.\n     */\n    function handleModalToOnChange(event) {\n        setModalTo(event.target.value);\n    }\n\n\n    return (\n        <div>\n            <Modal show={ showModal } onHide={ handleClose }>\n                <Modal.Header>\n                    <h3>\n                        { selectedMedia }\n                    </h3>\n                </Modal.Header>\n                <Modal.Body>\n                    <p>\n                        Total media duration: { mediaDuration } seconds\n                    </p>\n                    <label>\n                        From (seconds):\n                    </label>\n                    <input\n                        className=\"modal-input-from\"\n                        type=\"number\"\n                        min=\"0\"\n                        max={ mediaDuration }\n                        onChange={ handleModalFromOnChange }>\n                    </input>\n                    <br></br>\n                    <label>\n                        To (seconds):\n                    </label>\n                    <input\n                        className=\"modal-input-to\"\n                        type=\"number\"\n                        min=\"0\"\n                        max={ mediaDuration }\n                        onChange={ handleModalToOnChange }></input>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={ handleClose }>Close</Button>\n                    <Button variant=\"primary\" onClick={ handleAddToStream }>Add to stream</Button>\n                </Modal.Footer>\n            </Modal>\n\n            <div class=\"container\">\n                <div class=\"row\">\n                    <div class=\"col-sm\">\n                        <h1> {props.tableOneHeading } </h1>\n                        <BootstrapTable\n                            classes=\"table-sm\"\n                            keyField=\"filename\"\n                            data={ availableMediaFilesData }\n                            columns={ availableFilesColumns }\n                            bootstrap4={ true }\n                            hover={ true }\n                            rowEvents={ availableMediaFilesRowEvents }\n                        />\n                    </div>\n                    <div class=\"col-sm\">\n                        <h1> { props.tableTwoHeading }</h1>\n                        <BootstrapTable\n                            classes=\"table-sm\"\n                            keyField=\"id\"\n                            data={ mediaAddedToStreamData }\n                            columns={ addedToStreamColumns }\n                            bootstrap4={ true }\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\n\nexport default MediaFilePicker;","import './App.css';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport MediaFilePicker from \"./Components/MediaFilePicker\";\nimport Axios from \"axios\";\nimport Button from 'react-bootstrap/Button';\nimport ReactHlsPlayer from 'react-hls-player';\nimport { useState, useRef } from \"react\";\nimport { ClipLoader } from \"react-spinners\";\n\nconst App = () => {\n  const videoFilesToStream = useRef([]);\n  const audioFilesToStream = useRef([]);\n  const [showVideoPlayer, setShowVideoPlayer] = useState(false);\n  const [streamCreationStatus, setStreamCreationStatus] = useState(\"\");\n  const [showStreamStatus, setShowStreamStatus] = useState(false);\n  const [createStreamBtnDisabled, setcreateStreamBtnDisabled] = useState(false);\n  const [showClipLoader, setShowClipLoader] = useState(false);\n\n  return (\n    <div>\n      {showVideoPlayer === true ?\n        <div>\n\n          <div className=\"container d-flex flex-column min-vh-100 justify-content-center\">\n            <div className=\"row\">\n              <div className=\"col\">\n                <div className=\"text-center\">\n                  <ReactHlsPlayer\n                    src={\"http://localhost:3000/getStreamFile\"}\n                    autoPlay={true}\n                    controls={true}\n                    width=\"60%\"\n                    height=\"auto\"\n                  />\n                </div>\n                <div className=\"text-center\">\n                  <Button onClick={handleOnClickBack}> Back </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        :\n        <div>\n          <MediaFilePicker\n            loadAvailableMediaFiles={getVideoFilesData}\n            tableOneHeading=\"Available video files\"\n            tableTwoHeading=\"Video files added to stream\"\n            getMediaDurationRoute=\"getVideoFileDuration\"\n            mediaToStream={videoFilesToStream.current}\n          />\n\n          <MediaFilePicker\n            loadAvailableMediaFiles={getAudioFilesData}\n            tableOneHeading=\"Available audio files\"\n            tableTwoHeading=\"Audio files added to stream\"\n            getMediaDurationRoute=\"getAudioFileDuration\"\n            mediaToStream={audioFilesToStream.current}\n          />\n\n          <div class=\"row\">\n            <div class=\"col text-center\">\n              <Button disabled={createStreamBtnDisabled} variant=\"primary\" size=\"lg\" onClick={handleCreateStreamOnClick}>\n                Create stream\n              </Button>\n              <div>\n                {showStreamStatus ? <p>{streamCreationStatus}</p> : null}\n              </div>\n              <div>\n                {showClipLoader ? <ClipLoader loading={true}/>: null}\n              </div>\n            </div>\n          </div>\n        </div>\n      }\n    </div>\n  );\n\n  async function handleCreateStreamOnClick() {\n    if (videoFilesToStream.current.length !== 0) {\n      setcreateStreamBtnDisabled(true);\n      setShowClipLoader(true);\n      setShowStreamStatus(true);\n  \n      const videoMediaClipJson = [];\n      videoFilesToStream.current.forEach((video) => {\n        const jsonData = {\n          filename: video.filename,\n          from: video.from,\n          to: video.to\n        }\n        videoMediaClipJson.push(jsonData);\n      });\n  \n      const audioMediaClipJson = [];\n      audioFilesToStream.current.forEach((audio) => {\n        const jsonData = {\n          filename: audio.filename,\n          from: audio.from,\n          to: audio.to\n        }\n        audioMediaClipJson.push(jsonData);\n      });\n  \n      const createVideoClipsJsonResponse = await Axios.post(\"http://localhost:3000/createVideoClipsJson\", videoMediaClipJson);\n      const createAudioClipsJsonResponse = await Axios.post(\"http://localhost:3000/createAudioClipsJson\", audioMediaClipJson);\n  \n      setStreamCreationStatus(\"this will take some time.. please wait\");\n      const createStreamResponse = await Axios.get(\"http://localhost:3000/createStream\");\n      setStreamCreationStatus(\"Create stream status: \" + createStreamResponse.data);\n  \n      if (createStreamResponse.data === \"success\") {\n        setShowStreamStatus(false);\n        setcreateStreamBtnDisabled(false);\n        setShowClipLoader(false);\n        setShowVideoPlayer(true);\n      }\n    } else {\n      alert(\"Please add some videos to the stream\");\n    }\n  }\n\n  function handleOnClickBack() {\n    setShowVideoPlayer(false);\n  }\n};\n\n\nexport default App;\n\n/**\n * \n * @returns all the video file names in an array\n */\nasync function getVideoFilesData() {\n  try {\n    const response = await Axios.get(\"http://localhost:3000/getVideoFiles\");\n    return response;\n  } catch (error) {\n    console.log(\"error occured during getVideoFilesData() call from client\");\n    console.log(error);\n  }\n}\n\n/**\n * \n * @returns all the audio file names in an array\n */\nasync function getAudioFilesData() {\n  try {\n    const response = await Axios.get(\"http://localhost:3000/getAudioFiles\");\n    return response;\n  } catch (error) {\n    console.log(\"error occured during getAudioFilesData() call from client\");\n    console.log(error);\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}